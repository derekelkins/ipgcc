QOI
    -> QOIHeader
       { width = QOIHeader.width }
       { height = QOIHeader.height }
       { channels = QOIHeader.channels }
       { colorspace = QOIHeader.colorspace }
       QOIChunks
       { chunks = QOIChunks.values };

QOIHeader
    -> "qoif"
        BE_U32 { width = BE_U32.value }
        BE_U32 { height = BE_U32.value }
        { channels = . }
        { colorspace = . };

QOIChunks -> repeat QOIChunk.chunk until EndMarker;

QOIChunk -> { tagByte = . } Chunk { chunk = Chunk.this } where {
    Chunk
        -> ?[ tagByte == 0xFE ] { tag = "rgb" }
            { r = . } { g = . } { b = . }
         / ?[ tagByte == 0xFF ] { tag = "rgba" }
            { r = . } { g  = . } { b  = . } { a  = . }
         / ?[ (tagByte >> 6) == 0 ] { tag = "index" }
            { index = tagByte & 0x3F }
         / ?[ (tagByte >> 6) == 1 ] { tag = "diff" }
            { dr = (tagByte >> 4) & 0x03 } { dg = (tagByte >> 2) & 0x03 } { db = tagByte & 0x03 }
         / ?[ (tagByte >> 6) == 2 ] { tag = "luma" }
            { diffGreen = tagByte & 0x3F }
            U8
            { drdg = U8.value >> 4 }
            { dbdg = U8.value & 0x0F }
         / ?[ (tagByte >> 6) == 3 ] { tag = "run" }
            { run = tagByte & 0x3F };
};

EndMarker -> "\x00\x00\x00\x00\x00\x00\x00\x01";

U8 -> { value = . };
BE_U32 -> { bs = *[4] } { value = bs[3] | (bs[2] << 8) | (bs[1] << 16) | (bs[0] << 24) };
