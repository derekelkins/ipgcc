const fs = require("node:fs");

function decodeAscii(bytes) {
  return new TextDecoder("ascii").decode(new Uint8Array(bytes));
}

function makeEntry(name, descriptor, type) {
  return {
    name: decodeAscii(name),
    descriptor: new Uint8Array(descriptor).values().toArray(),
    type,
  };
}

function empty() {
  return {};
}

function projectSections(sections) {
  return sections.map(o => o.section);
}

%preamble_end

// `man elf(5)` seems to be the reference to use.
ELF -> H[0, 128]
       for i = 0 to H.e_shnum do SH[H.e_shoff + i*H.e_shentsize, H.e_shoff + (i + 1)*H.e_shentsize]
       for i = 1 to H.e_shnum do Sec(SH(i).sh_type)[SH(i).sh_offset, SH(i).sh_offset + SH(i).sh_size]
       { header = H.this }
       { section_headers = SH.these }
       { sections = projectSections(Sec.these) };

Sec(sh_type)
    -> ?[ sh_type == 6 ]
       DynSec { section = DynSec.section }
     / ?[ sh_type == 3 ]
       StrSec { section = StrSec.section }
     / ?[ sh_type == 11 || sh_type == 2 ] 
       DynSymSec { section = DynSymSec.section }
     / ?[ sh_type == 7 ]
       NoteSec { section = NoteSec.section }
     / ?[ sh_type == 9 ]
       RelSec { section = RelSec.section }
     / ?[ sh_type == 4 ]
       RelAddEndSec { section = RelAddEndSec.section }
     / ?[ sh_type == 8 ] // NoBits section
       { section = empty() }
     / { section = *[0, EOI] };

NUL_BYTE -> "\x00";

x7F_BYTE -> U8 ?[ U8.value == 0x7F ]; // TODO: Deal with this.

U8 -> { value = . };

// NOTE: Endianness is determined by the header, but the rest of the data will be in the target
// machine's natural endianness. For our purposes, we just assume its little endian.
U16 -> { bs = *[2] } { value = bs[0] | (bs[1] << 8) };

U32 -> { bs = *[4] } { value = bs[0] | (bs[1] << 8) | (bs[2] << 16) | (bs[3] << 24) };

U64 -> { bs = *[8] }
       { value = bs[0] | (bs[1] << 8) | (bs[2] << 16) | (bs[3] << 24) | (bs[4] << 32) | (bs[5] << 40) | (bs[6] << 48) | (bs[7] << 56) };

H -> x7F_BYTE "ELF"
    { ei_class = . }
    { ei_data = . }
    { ei_version = . }
    { abi = . }
    { abi_version = . }
    U16[16, 18] { e_type = U16.value }
    U16 { e_machine = U16.value }
    U32 { e_version = U32.value }
    U64 { e_entry = U64.value }
    U64 { e_phoff = U64.value }
    U64 { e_shoff = U64.value }
    U32 { e_flags = U32.value }
    U16 { e_ehsize = U16.value }
    U16 { e_phentsize = U16.value }
    U16 { e_phnum = U16.value }
    U16 { e_shentsize = U16.value }
    U16 { e_shnum = U16.value }
    U16 { e_shstrndx = U16.value };

SH -> U32 { sh_name = U32.value }
      U32 { sh_type = U32.value }
      U64 { sh_flags = U64.value }
      U64 { sh_addr = U64.value }
      U64 { sh_offset = U64.value }
      U64 { sh_size = U64.value }
      U32 { sh_link = U32.value }
      U32 { sh_info = U32.value }
      U32 { sh_addralign = U32.value }
      U64 { sh_entsize = U64.value };

DynSec -> for i = 0 to EOI/16 do DynSecEntry[16*i, 16*(i + 1)]
          { section = DynSecEntry.these };

DynSecEntry -> U64 { tag = U64.value } U64 { value_or_ptr = U64.value };

// StrSec -> Str StrSec / Str;
StrSec -> repeat Str.string { section = values };

// Str -> "\x00" / { value = . } Str;
Str -> repeat U8.value until NUL_BYTE { string = decodeAscii(values) };

DynSymSec -> for i = 0 to EOI/24 do DynSymSecEntry[24*i, 24*(i + 1)]
             { section = DynSymSecEntry.these };

DynSymSecEntry -> U32 { sh_name = U32.value }
                  { st_info = . }
                  { st_other = . }
                  U16 { st_shndx = U16.value }
                  U64 { st_value = U64.value }
                  U64 { st_size = U64.value };

// NoteSec -> NoteSecEntry NoteSec / NoteSecEntry;
NoteSec -> repeat NoteSecEntry.entry { section = values };

NoteSecEntry -> U32 { len_name = U32.value }
                U32 { len_descriptor = U32.value }
                U32 { type = U32.value }
                Name[len_name]
                Descriptor[Name.END + ((-len_name)&3), Name.END + ((-len_name)&3) + len_descriptor]
                { entry = makeEntry(Name.value, Descriptor.value, type) };

Name -> { value = *[EOI - 1] } "\x00";

Descriptor -> { value = * };

RelAddEndSec -> for i = 0 to EOI/24 do RelAddEndSecEntry[24*i, 24*(i + 1)]
                { section = RelAddEndSecEntry.these };

RelAddEndSecEntry -> U64 { offset = U64.value }
                     U64 { info = U64.value }
                     U64 { addend = U64.value };

RelSec -> for i = 0 to EOI/16 do RelSecEntry[16*i, 16*(i + 1)]
          { section = RelSecEntry.these };

RelSecEntry -> U64 { offset = U64.value } U64 { info = U64.value };

%postamble_begin

console.log(JSON.stringify(ELF(fs.readFileSync("./elf_samples/1.elf"))));
