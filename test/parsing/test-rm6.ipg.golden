RM6
  -> HeaderV6@0[0, EOI]
     Blocks@0[HeaderV6@0.END, EOI]
     { blocks = Blocks@0.values };

HeaderV6
  -> "reMarkable .lines file, version=6          "[0, 43];

Blocks
  -> repeat FullBlock@0[FullBlock@0.END, EOI].block starting on [0, EOI];

FullBlock
  -> MainBlockInfo@0[0, EOI]
     Block@0(MainBlockInfo@0.blockType, MainBlockInfo@0.currentVersion)[MainBlockInfo@0.END, MainBlockInfo@0.END + MainBlockInfo@0.length]
     Bytes@0[Block@0.END, MainBlockInfo@0.END + MainBlockInfo@0.length]
     { block = makeBlock(MainBlockInfo@0.this, Block@0.data, Bytes@0.value) };

MainBlockInfo
  -> U32@0[0, EOI]
     { length = U32@0.value }
     U8@0[U32@0.END, EOI]
     ?[ check(U8@0.value == 0, "unknown value is non-zero") ]
     { minVersion = .[U8@0.END] }
     ?[ check(minVersion >= 0, "minVersion < 0") ]
     { currentVersion = .[U8@0.END + 1] }
     ?[ check(currentVersion >= 0 && minVersion <= currentVersion, "currentVersion not between 0 and minVersion") ]
     { blockType = .[U8@0.END + 2] };

Block(blockType, version)
  -> ?[ blockType == 0 ]
     MigrationInfoBlock@0[0, EOI]
     { data = MigrationInfoBlock@0.this }
   / ?[ blockType == 1 ]
     SceneTreeBlock@0[0, EOI]
     { data = SceneTreeBlock@0.this }
   / ?[ blockType == 2 ]
     TreeNodeBlock@0[0, EOI]
     { data = TreeNodeBlock@0.this }
   / ?[ blockType == 3 ]
     SceneGlyphItemBlock@0[0, EOI]
     { data = SceneGlyphItemBlock@0.this }
   / ?[ blockType == 4 ]
     SceneGroupItemBlock@0[0, EOI]
     { data = SceneGroupItemBlock@0.this }
   / ?[ blockType == 5 ]
     SceneLineItemBlock@0(version)[0, EOI]
     { data = SceneLineItemBlock@0.this }
   / ?[ blockType == 6 ]
     SceneTextItemBlock@0[0, EOI]
     { data = SceneTextItemBlock@0.this }
   / ?[ blockType == 7 ]
     RootTextBlock@0[0, EOI]
     { data = RootTextBlock@0.this }
   / ?[ blockType == 8 ]
     SceneTombstoneItemBlock@0[0, EOI]
     { data = SceneTombstoneItemBlock@0.this }
   / ?[ blockType == 9 ]
     AuthorIdsBlock@0[0, EOI]
     { data = AuthorIdsBlock@0.this }
   / ?[ blockType == 10 ]
     PageInfoBlock@0[0, EOI]
     { data = PageInfoBlock@0.this }
   / ?[ blockType == 13 ]
     SceneInfo@0[0, EOI]
     { data = SceneInfo@0.this }
   / UnknownBlock@0[0, EOI]
     { data = UnknownBlock@0.data };

AuthorIdsBlock
  -> VarUInt@0[0, EOI]
     for i = 0 to VarUInt@0.value do AuthorId@0[AuthorId@0.END, EOI]
     { authorIds = AuthorId@0.these };

AuthorId
  -> SubBlock@0(0)[0, EOI]
     VarUInt@0[SubBlock@0.END, SubBlock@0.END + SubBlock@0.length]
     ?[ check(VarUInt@0.value == 16, "Expect UUID to have length 16") ]
     { uuid = *[VarUInt@0.END, VarUInt@0.END + VarUInt@0.value] }
     U16@0[VarUInt@0.END + VarUInt@0.value, SubBlock@0.END + SubBlock@0.length]
     { authorId = U16@0.value }
     ExpectEmpty@0[U16@0.END, SubBlock@0.END + SubBlock@0.length];

MigrationInfoBlock
  -> TaggedId@0(1)[0, EOI]
     { migrationId = TaggedId@0.value }
     TaggedBool@0(2)[TaggedId@0.END, EOI]
     { isDevice = TaggedBool@0.value }
     OptionalTaggedBool@0(3)[TaggedBool@0.END, EOI]
     { unknown = OptionalTaggedBool@0.value };

TreeNodeBlock
  -> TaggedId@0(1)[0, EOI]
     { nodeId = TaggedId@0.value }
     LWWString@0(2)[TaggedId@0.END, EOI]
     { label = LWWString@0.value }
     LWWBool@0(3)[LWWString@0.END, EOI]
     { visible = LWWBool@0.value }
     OptionalLWWID@0(7)[LWWBool@0.END, EOI]
     { anchorId = OptionalLWWID@0.value }
     OptionalLWWU8@0(8)[OptionalLWWID@0.END, EOI]
     { anchorType = OptionalLWWU8@0.value }
     OptionalLWWFloat32@0(9)[OptionalLWWU8@0.END, EOI]
     { anchorThreshold = OptionalLWWFloat32@0.value }
     OptionalLWWFloat32@1(10)[OptionalLWWFloat32@0.END, EOI]
     { anchorOriginX = OptionalLWWFloat32@1.value };

PageInfoBlock
  -> TaggedU32@0(1)[0, EOI]
     { loadsCount = TaggedU32@0.value }
     TaggedU32@1(2)[TaggedU32@0.END, EOI]
     { mergesCount = TaggedU32@1.value }
     TaggedU32@2(3)[TaggedU32@1.END, EOI]
     { textCharsCount = TaggedU32@2.value }
     TaggedU32@3(4)[TaggedU32@2.END, EOI]
     { textLinesCount = TaggedU32@3.value }
     OptionalU32@0(5)[TaggedU32@3.END, EOI]
     { typeFolioUseCount = OptionalU32@0.value };

SceneTreeBlock
  -> TaggedId@0(1)[0, EOI]
     { treeId = TaggedId@0.value }
     TaggedId@1(2)[TaggedId@0.END, EOI]
     { nodeId = TaggedId@1.value }
     TaggedBool@0(3)[TaggedId@1.END, EOI]
     { isUpdate = TaggedBool@0.value }
     SubBlock@0(4)[TaggedBool@0.END, EOI]
     TaggedId@2(1)[SubBlock@0.END, SubBlock@0.END + SubBlock@0.length]
     { parentId = TaggedId@2.value }
     ExpectEmpty@0[TaggedId@2.END, SubBlock@0.END + SubBlock@0.length];

SceneInfo
  -> LWWID@0(1)[0, EOI]
     { currentLayer = LWWID@0.value }
     OptionalLWWBool@0(2)[LWWID@0.END, EOI]
     { backgroundVisible = OptionalLWWBool@0.value }
     OptionalLWWBool@1(3)[OptionalLWWBool@0.END, EOI]
     { rootDocumentVisible = OptionalLWWBool@1.value }
     OptionalIntPair@0(4)[OptionalLWWBool@1.END, EOI]
     { paperSize = OptionalIntPair@0.value };

SceneItemInfo
  -> TaggedId@0(1)[0, EOI]
     { parentId = TaggedId@0.value }
     TaggedId@1(2)[TaggedId@0.END, EOI]
     { itemId = TaggedId@1.value }
     TaggedId@2(3)[TaggedId@1.END, EOI]
     { leftId = TaggedId@2.value }
     TaggedId@3(4)[TaggedId@2.END, EOI]
     { rightId = TaggedId@3.value }
     TaggedU32@0(5)[TaggedId@3.END, EOI]
     { deletedLength = TaggedU32@0.value };

SceneTombstoneItemBlock
  -> SceneItemInfo@0[0, EOI]
     { item = makeCrdtSequenceItem(SceneItemInfo@0.this) };

SceneGlyphItemBlock
  -> SceneItemInfo@0[0, EOI]
     SceneGlyphItemBlockValue@0[SceneItemInfo@0.END, EOI]
     { item = makeCrdtSequenceItem(SceneItemInfo@0.this, SceneGlyphItemBlockValue@0.value) };

SceneGlyphItemBlockValue
  -> SubBlock@0(6)[0, EOI]
     { outerEnd = SubBlock@0.END + SubBlock@0.length }
     "\x01"[SubBlock@0.END, SubBlock@0.END + 1]
     OptionalU32@0(2)[SubBlock@0.END + 1, EOI]
     { optStart = OptionalU32@0.value }
     OptionalU32@1(3)[OptionalU32@0.END, EOI]
     { optLength = OptionalU32@1.value }
     TaggedU32@0(4)[OptionalU32@1.END, EOI]
     { colorId = TaggedU32@0.value }
     String@0(5)[TaggedU32@0.END, EOI]
     { text = String@0.value }
     { start = optStart == getNull() ? 0 : optStart }
     { length = optLength == getNull() ? getLength(text) : optLength }
     SubBlock@1(6)[String@0.END, EOI]
     VarUInt@0[SubBlock@1.END + 1, SubBlock@1.END + SubBlock@1.length]
     for i = 0 to VarUInt@0.value do Rectangle@0[VarUInt@0.END + 32 * i, SubBlock@1.END + SubBlock@1.length]
     { rectangles = Rectangle@0.these }
     ExpectEmpty@0[Rectangle@0.END, SubBlock@1.END + SubBlock@1.length]
     ExpectEmpty@1[ExpectEmpty@0.END, outerEnd]
     { value = makeSceneGlyItemBlockValue(start, length, colorId, text, rectangles) }
   / { value = getNull() };

Rectangle
  -> Float64@0[0, EOI]
     { x = Float64@0.value }
     Float64@1[Float64@0.END, EOI]
     { y = Float64@1.value }
     Float64@2[Float64@1.END, EOI]
     { width = Float64@2.value }
     Float64@3[Float64@2.END, EOI]
     { height = Float64@3.value };

SceneGroupItemBlock
  -> SceneItemInfo@0[0, EOI]
     SceneGroupItemBlockValue@0[SceneItemInfo@0.END, EOI]
     { item = makeCrdtSequenceItem(SceneItemInfo@0.this, SceneGroupItemBlockValue@0.value) };

SceneGroupItemBlockValue
  -> SubBlock@0(6)[0, EOI]
     "\x02"[SubBlock@0.END, SubBlock@0.END + 1]
     TaggedId@0(2)[SubBlock@0.END + 1, SubBlock@0.END + SubBlock@0.length]
     { value = TaggedId@0.value }
     ExpectEmpty@0[TaggedId@0.END, SubBlock@0.END + SubBlock@0.length]
   / { value = getNull() };

SceneLineItemBlock(version)
  -> SceneItemInfo@0[0, EOI]
     SceneLineItemBlockValue@0(version)[SceneItemInfo@0.END, EOI]
     { item = makeCrdtSequenceItem(SceneItemInfo@0.this, SceneLineItemBlockValue@0.value) };

SceneLineItemBlockValue(version)
  -> SubBlock@0(6)[0, EOI]
     { outerEnd = SubBlock@0.END + SubBlock@0.length }
     "\x03"[SubBlock@0.END, SubBlock@0.END + 1]
     TaggedU32@0(1)[SubBlock@0.END + 1, outerEnd]
     { toolId = TaggedU32@0.value }
     TaggedU32@1(2)[TaggedU32@0.END, outerEnd]
     { colorId = TaggedU32@1.value }
     TaggedFloat64@0(3)[TaggedU32@1.END, outerEnd]
     { thicknessScale = TaggedFloat64@0.value }
     TaggedFloat32@0(4)[TaggedFloat64@0.END, outerEnd]
     { startLength = TaggedFloat32@0.value }
     SubBlock@1(5)[TaggedFloat32@0.END, outerEnd]
     { pointSize = pointSerializedSize(version) }
     ?[ check(SubBlock@1.length % pointSize == 0, "Point size does not divide subblock size") ]
     for i = 0 to SubBlock@1.length / pointSize do Point@0(version)[SubBlock@1.END + pointSize * i, SubBlock@1.END + pointSize * (i + 1)]
     { points = Point@0.these }
     ExpectEmpty@0[Point@0.END, SubBlock@1.END + SubBlock@1.length]
     TaggedId@0(6)[ExpectEmpty@0.END, outerEnd]
     { timestamp = TaggedId@0.value }
     OptionalTaggedId@0(7)[TaggedId@0.END, EOI]
     { moveId = OptionalTaggedId@0.value }
     ExpectEmpty@1[OptionalTaggedId@0.END, outerEnd]
     { value = makeSceneLineItemBlockValue(toolId, colorId, thicknessScale, startLength, points, moveId) }
   / { value = getNull() };

Point(version)
  -> Float32@0[0, EOI]
     { x = Float32@0.value }
     Float32@1[Float32@0.END, EOI]
     { y = Float32@1.value }
     PointVersions@0(version)[Float32@1.END, EOI]
     { speed = PointVersions@0.speed }
     { width = PointVersions@0.width }
     { direction = PointVersions@0.direction }
     { pressure = PointVersions@0.pressure };

PointVersions(version)
  -> ?[ version == 1 ]
     Float32@0[0, EOI]
     { speed = 4 * Float32@0.value }
     Float32@1[Float32@0.END, EOI]
     { direction = 255 * Float32@1.value / getTwoPi() }
     Float32@2[Float32@1.END, EOI]
     { width = int(round(4 * Float32@2.value)) }
     Float32@3[Float32@2.END, EOI]
     { pressure = 255 * Float32@3.value }
   / ?[ version == 2 ]
     U16@0[0, EOI]
     { speed = U16@0.value }
     U16@1[U16@0.END, EOI]
     { width = U16@1.value }
     { direction = .[U16@1.END] }
     { pressure = .[U16@1.END + 1] };

SceneTextItemBlock
  -> SceneItemInfo@0[0, EOI]
     { item = makeCrdtSequenceItem(SceneItemInfo@0.this) };

RootTextBlock
  -> TaggedId@0(1)[0, EOI]
     { blockId = TaggedId@0.value }
     ?[ checkRootTextBlockId(blockId) ]
     SubBlock@0(2)[TaggedId@0.END, EOI]
     { outerEnd = SubBlock@0.END + SubBlock@0.length }
     SubBlock@1(1)[SubBlock@0.END, outerEnd]
     { innerEnd = SubBlock@1.END + SubBlock@1.length }
     SubBlock@2(1)[SubBlock@1.END, innerEnd]
     VarUInt@0[SubBlock@2.END, EOI]
     for i = 0 to VarUInt@0.value do TextItem@0[TextItem@0.END, SubBlock@2.END + SubBlock@2.length]
     { textItems = TextItem@0.these }
     ExpectEmpty@0[TextItem@0.END, SubBlock@2.END + SubBlock@2.length]
     ExpectEmpty@1[ExpectEmpty@0.END, innerEnd]
     SubBlock@3(2)[ExpectEmpty@1.END, outerEnd]
     { innerEnd = SubBlock@3.END + SubBlock@3.length }
     SubBlock@4(1)[SubBlock@3.END, innerEnd]
     VarUInt@1[SubBlock@4.END, EOI]
     for i = 0 to VarUInt@1.value do TextFormat@0[TextFormat@0.END, SubBlock@4.END + SubBlock@4.length]
     { textFormats = TextFormat@0.these }
     ExpectEmpty@2[TextFormat@0.END, SubBlock@4.END + SubBlock@4.length]
     ExpectEmpty@3[ExpectEmpty@2.END, innerEnd]
     ExpectEmpty@4[ExpectEmpty@3.END, outerEnd]
     SubBlock@5(3)[ExpectEmpty@4.END, EOI]
     Float64@0[SubBlock@5.END, SubBlock@5.END + SubBlock@5.length]
     { xPosition = Float64@0.value }
     Float64@1[Float64@0.END, SubBlock@5.END + SubBlock@5.length]
     { yPosition = Float64@1.value }
     ExpectEmpty@5[ExpectEmpty@4.END, SubBlock@5.END + SubBlock@5.length]
     TaggedFloat32@0(4)[ExpectEmpty@5.END, EOI]
     { width = TaggedFloat32@0.value };

TextItem
  -> SubBlock@0(0)[0, EOI]
     TaggedId@0(2)[SubBlock@0.END, EOI]
     { itemId = TaggedId@0.value }
     TaggedId@1(3)[TaggedId@0.END, EOI]
     { leftId = TaggedId@1.value }
     TaggedId@2(4)[TaggedId@1.END, EOI]
     { rightId = TaggedId@2.value }
     TaggedU32@0(5)[TaggedId@2.END, EOI]
     { deletedLength = TaggedU32@0.value }
     TextItemValue@0[TaggedU32@0.END, SubBlock@0.END + SubBlock@0.length]
     { value = TextItemValue@0.value }
     ExpectEmpty@0[TextItemValue@0.END, SubBlock@0.END + SubBlock@0.length];

TextItemValue
  -> StringWithFormat@0(6)[0, EOI]
     { value = processTextItemValue(StringWithFormat@0.value) }
   / { value = "" };

StringWithFormat(expectedIndex)
  -> SubBlock@0(expectedIndex)[0, EOI]
     VarUInt@0[SubBlock@0.END, SubBlock@0.END + SubBlock@0.length]
     Bool@0[VarUInt@0.END, SubBlock@0.END + SubBlock@0.length]
     ?[ check(Bool@0.value, "StringWithFormat flag unset") ]
     ?[ check(Bool@0.END + VarUInt@0.value <= SubBlock@0.END + SubBlock@0.length, "StringWithFormat: Overfull block") ]
     Bytes@0[Bool@0.END, Bool@0.END + VarUInt@0.value]
     OptionalU32@0(2)[Bytes@0.END, SubBlock@0.END + SubBlock@0.length]
     { value = makeStringWithFormat(decodeAscii(Bytes@0.value), OptionalU32@0.value) }
     ExpectEmpty@0[OptionalU32@0.END, SubBlock@0.END + SubBlock@0.length];

TextFormat
  -> CrdtId@0[0, EOI]
     { charId = CrdtId@0.this }
     TaggedId@0(1)[CrdtId@0.END, EOI]
     { timestamp = TaggedId@0.value }
     SubBlock@0(2)[TaggedId@0.END, EOI]
     "\x11"[SubBlock@0.END, SubBlock@0.END + 1]
     { formatCode = .[SubBlock@0.END + 1] }
     ExpectEmpty@0[SubBlock@0.END + 2, SubBlock@0.END + SubBlock@0.length]
     { value = lwwU8(timestamp, formatCode < 0 || formatCode > 7 ? 1 : formatCode) };

UnknownBlock
  -> { data = *[0, EOI] };

OptionalLWWBool(expectedIndex)
  -> LWWBool@0(expectedIndex)[0, EOI]
     { value = LWWBool@0.value }
   / { value = getNull() };

LWWBool(expectedIndex)
  -> SubBlock@0(expectedIndex)[0, EOI]
     TaggedId@0(1)[SubBlock@0.END, SubBlock@0.END + SubBlock@0.length]
     TaggedBool@0(2)[TaggedId@0.END, SubBlock@0.END + SubBlock@0.length]
     { value = lwwBool(TaggedId@0.value, TaggedBool@0.value) }
     ExpectEmpty@0[TaggedBool@0.END, SubBlock@0.END + SubBlock@0.length];

OptionalLWWU8(expectedIndex)
  -> LWWU8@0(expectedIndex)[0, EOI]
     { value = LWWU8@0.value }
   / { value = getNull() };

LWWU8(expectedIndex)
  -> SubBlock@0(expectedIndex)[0, EOI]
     TaggedId@0(1)[SubBlock@0.END, SubBlock@0.END + SubBlock@0.length]
     TaggedU8@0(2)[TaggedId@0.END, SubBlock@0.END + SubBlock@0.length]
     { value = lwwU8(TaggedId@0.value, TaggedU8@0.value) }
     ExpectEmpty@0[TaggedU8@0.END, SubBlock@0.END + SubBlock@0.length];

OptionalLWWFloat32(expectedIndex)
  -> LWWFloat32@0(expectedIndex)[0, EOI]
     { value = LWWFloat32@0.value }
   / { value = getNull() };

LWWFloat32(expectedIndex)
  -> SubBlock@0(expectedIndex)[0, EOI]
     TaggedId@0(1)[SubBlock@0.END, SubBlock@0.END + SubBlock@0.length]
     TaggedFloat32@0(2)[TaggedId@0.END, SubBlock@0.END + SubBlock@0.length]
     { value = lwwFloat32(TaggedId@0.value, TaggedFloat32@0.value) }
     ExpectEmpty@0[TaggedFloat32@0.END, SubBlock@0.END + SubBlock@0.length];

OptionalLWWID(expectedIndex)
  -> LWWID@0(expectedIndex)[0, EOI]
     { value = LWWID@0.value }
   / { value = getNull() };

LWWID(expectedIndex)
  -> SubBlock@0(expectedIndex)[0, EOI]
     TaggedId@0(1)[SubBlock@0.END, SubBlock@0.END + SubBlock@0.length]
     { timestamp = TaggedId@0.value }
     TaggedId@1(2)[TaggedId@0.END, SubBlock@0.END + SubBlock@0.length]
     { value = lwwCrdtId(timestamp, TaggedId@1.value) }
     ExpectEmpty@0[TaggedId@1.END, SubBlock@0.END + SubBlock@0.length];

LWWString(expectedIndex)
  -> SubBlock@0(expectedIndex)[0, EOI]
     TaggedId@0(1)[SubBlock@0.END, SubBlock@0.END + SubBlock@0.length]
     String@0(2)[TaggedId@0.END, SubBlock@0.END + SubBlock@0.length]
     { value = lwwString(TaggedId@0.value, String@0.value) }
     ExpectEmpty@0[String@0.END, SubBlock@0.END + SubBlock@0.length];

String(expectedIndex)
  -> SubBlock@0(expectedIndex)[0, EOI]
     VarUInt@0[SubBlock@0.END, SubBlock@0.END + SubBlock@0.length]
     Bool@0[VarUInt@0.END, SubBlock@0.END + SubBlock@0.length]
     ?[ check(Bool@0.value, "String flag unset") ]
     ?[ check(Bool@0.END + VarUInt@0.value <= SubBlock@0.END + SubBlock@0.length, "String: Overfull block") ]
     Bytes@0[Bool@0.END, Bool@0.END + VarUInt@0.value]
     { value = decodeAscii(Bytes@0.value) }
     ExpectEmpty@0[Bytes@0.END, SubBlock@0.END + SubBlock@0.length];

OptionalU32(expectedIndex)
  -> TaggedU32@0(expectedIndex)[0, EOI]
     { value = TaggedU32@0.value }
   / { value = getNull() };

OptionalIntPair(expectedIndex)
  -> IntPair@0(expectedIndex)[0, EOI]
     { value = IntPair@0.value }
   / { value = getNull() };

IntPair(expectedIndex)
  -> SubBlock@0(expectedIndex)[0, EOI]
     U32@0[SubBlock@0.END, SubBlock@0.END + SubBlock@0.length]
     { fst = U32@0.value }
     U32@1[U32@0.END, SubBlock@0.END + SubBlock@0.length]
     { value = makePair(fst, U32@1.value) }
     ExpectEmpty@0[U32@1.END, SubBlock@0.END + SubBlock@0.length];

SubBlock(expectedIndex)
  -> Length4Tag@0(expectedIndex)[0, EOI]
     U32@0[Length4Tag@0.END, EOI]
     { length = U32@0.value };

CrdtId
  -> { part1 = .[0] }
     VarUInt@0[1, EOI]
     { part2 = VarUInt@0.value };

OptionalTaggedBool(expectedIndex)
  -> TaggedBool@0(expectedIndex)[0, EOI]
     { value = TaggedBool@0.value }
   / { value = !(!0) };

TaggedBool(expectedIndex)
  -> Byte1Tag@0(expectedIndex)[0, EOI]
     Bool@0[Byte1Tag@0.END, EOI]
     { value = Bool@0.value };

TaggedU8(expectedIndex)
  -> Byte1Tag@0(expectedIndex)[0, EOI]
     { value = .[Byte1Tag@0.END] };

TaggedU32(expectedIndex)
  -> Byte4Tag@0(expectedIndex)[0, EOI]
     U32@0[Byte4Tag@0.END, EOI]
     { value = U32@0.value };

TaggedFloat32(expectedIndex)
  -> Byte4Tag@0(expectedIndex)[0, EOI]
     Float32@0[Byte4Tag@0.END, EOI]
     { value = Float32@0.value };

TaggedFloat64(expectedIndex)
  -> Byte8Tag@0(expectedIndex)[0, EOI]
     Float64@0[Byte8Tag@0.END, EOI]
     { value = Float64@0.value };

OptionalTaggedId(expectedIndex)
  -> TaggedId@0(expectedIndex)[0, EOI]
     { value = TaggedId@0.value }
   / { value = getNull() };

TaggedId(expectedIndex)
  -> IDTag@0(expectedIndex)[0, EOI]
     CrdtId@0[IDTag@0.END, EOI]
     { value = makeCrdtId(CrdtId@0.part1, CrdtId@0.part2) };

IDTag(expectedIndex)
  -> Tag@0(expectedIndex, 15)[0, EOI];

Byte1Tag(expectedIndex)
  -> Tag@0(expectedIndex, 1)[0, EOI];

Byte4Tag(expectedIndex)
  -> Tag@0(expectedIndex, 4)[0, EOI];

Byte8Tag(expectedIndex)
  -> Tag@0(expectedIndex, 8)[0, EOI];

Length4Tag(expectedIndex)
  -> Tag@0(expectedIndex, 12)[0, EOI];

Tag(expectedIndex, expectedTagType)
  -> VarUInt@0[0, EOI]
     ?[ expectedIndex == VarUInt@0.value >> 4 ]
     ?[ expectedTagType == (VarUInt@0.value & 15) ];

ExpectEmpty
  -> ?[ warnIf(EOI != 0, "Underfull block") ]
     { _ = *[0, EOI] };

Bytes
  -> { value = *[0, EOI] };

Bool
  -> "\x00"[0, 1]
     { value = !(!0) }
   / "\x01"[0, 1]
     { value = !0 };

U8
  -> { value = .[0] };

U16
  -> { bs = *[0, 2] }
     { value = bs[0] | bs[1] << 8 };

U32
  -> { bs = *[0, 4] }
     { value = bs[0] | bs[1] << 8 | bs[2] << 16 | bs[3] << 24 };

Float32
  -> { bs = *[0, 4] }
     { value = toFloat32(bs) };

Float64
  -> { bs = *[0, 8] }
     { value = toFloat64(bs) };

VarUInt
  -> { value = .[0] }
     ?[ value >> 7 == 0 ]
   / U8@0[0, EOI]
     VarUInt@0[U8@0.END, EOI]
     { value = U8@0.value & 127 | VarUInt@0.value << 7 };